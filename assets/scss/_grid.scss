// Grid system

.container {
  width: 100%;
  padding-right: $grid-gutter;
  padding-left: $grid-gutter;
  margin-right: auto;
  margin-left: auto;
  max-width: $container-max-width;

  @include iphone-x-landscape() {
    padding-left: env(safe-area-inset-left);
    padding-right: env(safe-area-inset-right);
  }
}

.container-fluid {
  width: 100%;
  padding-right: $grid-gutter;
  padding-left: $grid-gutter;
  margin-right: auto;
  margin-left: auto;

  @include iphone-x-landscape() {
    padding-left: env(safe-area-inset-left);
    padding-right: env(safe-area-inset-right);
  }
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$grid-gutter / 2;
  margin-left: -$grid-gutter / 2;

  .break {
    width: 100%;

    @include media("<md") {
      display: none;
    }
  }
}

.col {
  position: relative;
  width: 100%;
  padding-right: $grid-gutter / 2;
  padding-left: $grid-gutter / 2;
}

.row-stretched {
  justify-content: space-between;

  .col {
    flex: initial;
  }
}


// Grid columns

@for $i from 1 through $grid-max-columns {
  .col-#{$i} {
    flex: 0 0 percentage($i / $grid-max-columns);
    max-width: percentage($i / $grid-max-columns);
  }
}

@each $bp, $w in $breakpoints {
  @include media(">#{$bp}") {
    @for $i from 1 through $grid-max-columns {
      .col-#{$bp}-#{$i} {
        flex: 0 0 percentage($i / $grid-max-columns);
        max-width: percentage($i / $grid-max-columns);
      }
    }
  }
}


// Grid offset

@for $i from 0 through ($grid-max-columns - 1) {
  @if not ($i == 0) { // Avoid emitting useless .offset-0
    .offset-#{$i} {
      $num: $i / $grid-max-columns;
      margin-left: if($num == 0, 0, percentage($num));
    }
  }
}

@each $bp, $w in $breakpoints {
  @include media(">#{$bp}") {
    @for $i from 0 through ($grid-max-columns - 1) {
      @if not ($i == 0) { // Avoid emitting useless .offset-0
        .offset-#{$bp}-#{$i} {
          $num: $i / $grid-max-columns;
          margin-left: if($num == 0, 0, percentage($num));
        }
      }
    }
  }
}
